{"ast":null,"code":"import axios from 'axios';\nimport { API_ENDPOINTS } from '../types';\n\n// Create axios instance with default configuration\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding auth tokens, etc.\napiClient.interceptors.request.use(config => {\n  // Add any auth headers here if needed\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for handling errors\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  // Handle common errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized\n    console.error('Unauthorized request');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 500) {\n    // Handle server errors\n    console.error('Server error:', error.response.data);\n  } else if (!error.response) {\n    // Handle network errors\n    console.error('Network error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// API service class\nclass ApiService {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.HEALTH);\n      return response.data.status === 'healthy';\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;\n    }\n  }\n\n  // Chat endpoints\n  async sendMessage(message, userId, mode = 'support') {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.CHAT.MESSAGE, {\n        message,\n        user_id: userId,\n        mode\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw new Error('Failed to send message. Please try again.');\n    }\n  }\n  async getConversationHistory(userId) {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.CHAT.CONVERSATION}/${userId}`);\n      return response.data.messages || [];\n    } catch (error) {\n      console.error('Error getting conversation history:', error);\n      return [];\n    }\n  }\n\n  // User endpoints\n  async createOrUpdateProfile(profile) {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.USERS.PROFILE, profile);\n      return response.data.user;\n    } catch (error) {\n      console.error('Error creating/updating profile:', error);\n      throw new Error('Failed to save profile. Please try again.');\n    }\n  }\n  async getUserProfile(userId) {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.USERS.PROFILE}/${userId}`);\n      return response.data.user;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n  }\n  async getUserContext(userId) {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.USERS.CONTEXT}/${userId}/context`);\n      return response.data.context;\n    } catch (error) {\n      console.error('Error getting user context:', error);\n      return {};\n    }\n  }\n\n  // Resource endpoints\n  async searchResources(location, needs = [], type = '') {\n    try {\n      const params = new URLSearchParams({\n        location,\n        needs: needs.join(','),\n        type\n      });\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.SEARCH}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching resources:', error);\n      return {\n        resources: [],\n        search_params: {\n          location,\n          needs,\n          type\n        },\n        total_count: 0\n      };\n    }\n  }\n  async getQuickActions(location) {\n    try {\n      const params = location ? `?location=${encodeURIComponent(location)}` : '';\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.QUICK_ACTIONS}${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting quick actions:', error);\n      return {\n        quick_actions: [],\n        location: location || ''\n      };\n    }\n  }\n  async getResourceCategories() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.RESOURCES.CATEGORIES);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting resource categories:', error);\n      return {\n        categories: []\n      };\n    }\n  }\n  async getNearbyResources(location) {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.NEARBY}/${encodeURIComponent(location)}`);\n      return response.data.resources || [];\n    } catch (error) {\n      console.error('Error getting nearby resources:', error);\n      return [];\n    }\n  }\n  async getCrisisResources(location) {\n    try {\n      const params = location ? `?location=${encodeURIComponent(location)}` : '';\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.CRISIS}${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting crisis resources:', error);\n      return {\n        crisis_resources: [],\n        location: location || ''\n      };\n    }\n  }\n\n  // Voice endpoints (placeholder for future implementation)\n  async convertVoiceToText(audioBlob) {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      const response = await apiClient.post(API_ENDPOINTS.CHAT.VOICE_TO_TEXT, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data.text || '';\n    } catch (error) {\n      console.error('Error converting voice to text:', error);\n      throw new Error('Voice-to-text conversion failed. Please try typing instead.');\n    }\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n\n// Export axios instance for direct use if needed\nexport { apiClient };\n\n// Utility functions for common API operations\nexport const apiUtils = {\n  // Handle API errors consistently\n  handleError: error => {\n    var _error$response3, _error$response3$data;\n    if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.error) {\n      return error.response.data.error;\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred. Please try again.';\n    }\n  },\n  // Check if response is successful\n  isSuccess: response => {\n    return response.status >= 200 && response.status < 300;\n  },\n  // Retry function for failed requests\n  retry: async (fn, maxRetries = 3, delay = 1000) => {\n    let lastError;\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n        if (i < maxRetries - 1) {\n          await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n        }\n      }\n    }\n    throw lastError;\n  }\n};","map":{"version":3,"names":["axios","API_ENDPOINTS","apiClient","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","_error$response","_error$response2","status","console","data","message","ApiService","healthCheck","get","HEALTH","sendMessage","userId","mode","post","CHAT","MESSAGE","user_id","Error","getConversationHistory","CONVERSATION","messages","createOrUpdateProfile","profile","USERS","PROFILE","user","getUserProfile","getUserContext","CONTEXT","context","searchResources","location","needs","type","params","URLSearchParams","join","RESOURCES","SEARCH","resources","search_params","total_count","getQuickActions","encodeURIComponent","QUICK_ACTIONS","quick_actions","getResourceCategories","CATEGORIES","categories","getNearbyResources","NEARBY","getCrisisResources","CRISIS","crisis_resources","convertVoiceToText","audioBlob","formData","FormData","append","VOICE_TO_TEXT","text","apiService","apiUtils","handleError","_error$response3","_error$response3$data","isSuccess","retry","fn","maxRetries","delay","lastError","i","resolve","setTimeout"],"sources":["/Users/sarthak/CAL hackathon 2025/Helper/social_change_frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  UserProfile,\n  ChatMessage,\n  ChatResponse,\n  Resource,\n  ResourceSearchResponse,\n  QuickAction,\n  QuickActionsResponse,\n  ResourceCategory,\n  CategoriesResponse,\n  CrisisResource,\n  CrisisResourcesResponse,\n  ApiResponse,\n  API_ENDPOINTS,\n} from '../types';\n\n// Create axios instance with default configuration\nconst apiClient: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for adding auth tokens, etc.\napiClient.interceptors.request.use(\n  (config) => {\n    // Add any auth headers here if needed\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for handling errors\napiClient.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error) => {\n    // Handle common errors\n    if (error.response?.status === 401) {\n      // Handle unauthorized\n      console.error('Unauthorized request');\n    } else if (error.response?.status === 500) {\n      // Handle server errors\n      console.error('Server error:', error.response.data);\n    } else if (!error.response) {\n      // Handle network errors\n      console.error('Network error:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API service class\nclass ApiService {\n  // Health check\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.HEALTH);\n      return response.data.status === 'healthy';\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;\n    }\n  }\n\n  // Chat endpoints\n  async sendMessage(\n    message: string,\n    userId?: string,\n    mode: 'support' | 'coach' = 'support'\n  ): Promise<ChatResponse> {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.CHAT.MESSAGE, {\n        message,\n        user_id: userId,\n        mode,\n      });\n      \n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw new Error('Failed to send message. Please try again.');\n    }\n  }\n\n  async getConversationHistory(userId: string): Promise<ChatMessage[]> {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.CHAT.CONVERSATION}/${userId}`);\n      return response.data.messages || [];\n    } catch (error) {\n      console.error('Error getting conversation history:', error);\n      return [];\n    }\n  }\n\n  // User endpoints\n  async createOrUpdateProfile(profile: UserProfile): Promise<UserProfile> {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.USERS.PROFILE, profile);\n      return response.data.user;\n    } catch (error) {\n      console.error('Error creating/updating profile:', error);\n      throw new Error('Failed to save profile. Please try again.');\n    }\n  }\n\n  async getUserProfile(userId: string): Promise<UserProfile | null> {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.USERS.PROFILE}/${userId}`);\n      return response.data.user;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n  }\n\n  async getUserContext(userId: string): Promise<any> {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.USERS.CONTEXT}/${userId}/context`);\n      return response.data.context;\n    } catch (error) {\n      console.error('Error getting user context:', error);\n      return {};\n    }\n  }\n\n  // Resource endpoints\n  async searchResources(\n    location: string,\n    needs: string[] = [],\n    type: string = ''\n  ): Promise<ResourceSearchResponse> {\n    try {\n      const params = new URLSearchParams({\n        location,\n        needs: needs.join(','),\n        type,\n      });\n\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.SEARCH}?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching resources:', error);\n      return {\n        resources: [],\n        search_params: { location, needs, type },\n        total_count: 0,\n      };\n    }\n  }\n\n  async getQuickActions(location?: string): Promise<QuickActionsResponse> {\n    try {\n      const params = location ? `?location=${encodeURIComponent(location)}` : '';\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.QUICK_ACTIONS}${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting quick actions:', error);\n      return {\n        quick_actions: [],\n        location: location || '',\n      };\n    }\n  }\n\n  async getResourceCategories(): Promise<CategoriesResponse> {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.RESOURCES.CATEGORIES);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting resource categories:', error);\n      return { categories: [] };\n    }\n  }\n\n  async getNearbyResources(location: string): Promise<Resource[]> {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.NEARBY}/${encodeURIComponent(location)}`);\n      return response.data.resources || [];\n    } catch (error) {\n      console.error('Error getting nearby resources:', error);\n      return [];\n    }\n  }\n\n  async getCrisisResources(location?: string): Promise<CrisisResourcesResponse> {\n    try {\n      const params = location ? `?location=${encodeURIComponent(location)}` : '';\n      const response = await apiClient.get(`${API_ENDPOINTS.RESOURCES.CRISIS}${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting crisis resources:', error);\n      return {\n        crisis_resources: [],\n        location: location || '',\n      };\n    }\n  }\n\n  // Voice endpoints (placeholder for future implementation)\n  async convertVoiceToText(audioBlob: Blob): Promise<string> {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n\n      const response = await apiClient.post(API_ENDPOINTS.CHAT.VOICE_TO_TEXT, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data.text || '';\n    } catch (error) {\n      console.error('Error converting voice to text:', error);\n      throw new Error('Voice-to-text conversion failed. Please try typing instead.');\n    }\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n\n// Export axios instance for direct use if needed\nexport { apiClient };\n\n// Utility functions for common API operations\nexport const apiUtils = {\n  // Handle API errors consistently\n  handleError: (error: any): string => {\n    if (error.response?.data?.error) {\n      return error.response.data.error;\n    } else if (error.message) {\n      return error.message;\n    } else {\n      return 'An unexpected error occurred. Please try again.';\n    }\n  },\n\n  // Check if response is successful\n  isSuccess: (response: AxiosResponse): boolean => {\n    return response.status >= 200 && response.status < 300;\n  },\n\n  // Retry function for failed requests\n  retry: async <T>(\n    fn: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> => {\n    let lastError: any;\n\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n        if (i < maxRetries - 1) {\n          await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n        }\n      }\n    }\n\n    throw lastError;\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}