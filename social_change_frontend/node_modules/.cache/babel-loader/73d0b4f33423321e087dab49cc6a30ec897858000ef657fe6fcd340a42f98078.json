{"ast":null,"code":"var _jsxFileName = \"/Users/sarthak/CAL hackathon 2025/Helper/social_change_frontend/src/contexts/ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { STORAGE_KEYS } from '../types';\nimport { apiService } from '../services/api';\nimport { useUserContext } from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentMode, setCurrentMode] = useState('support');\n  const userContext = useUserContext();\n\n  // Load conversation history from localStorage\n  useEffect(() => {\n    const loadHistory = () => {\n      try {\n        const savedHistory = localStorage.getItem(STORAGE_KEYS.CONVERSATION_HISTORY);\n        if (savedHistory) {\n          const parsedHistory = JSON.parse(savedHistory);\n          setMessages(parsedHistory.messages || []);\n          setCurrentMode(parsedHistory.mode || 'support');\n        }\n      } catch (error) {\n        console.error('Error loading conversation history:', error);\n      }\n    };\n    loadHistory();\n  }, []);\n\n  // Save messages to localStorage whenever they change\n  useEffect(() => {\n    if (messages.length > 0) {\n      const historyData = {\n        messages,\n        mode: currentMode,\n        timestamp: new Date().toISOString()\n      };\n      localStorage.setItem(STORAGE_KEYS.CONVERSATION_HISTORY, JSON.stringify(historyData));\n    }\n  }, [messages, currentMode]);\n  const sendMessage = useCallback(async (content, mode = currentMode) => {\n    if (!content.trim()) return;\n    const userMessage = {\n      message_id: `user_${Date.now()}`,\n      content: content.trim(),\n      sender: 'user',\n      timestamp: new Date().toISOString(),\n      mode\n    };\n\n    // Add user message immediately\n    setMessages(prev => [...prev, userMessage]);\n    setError(null);\n    setIsLoading(true);\n    try {\n      // Get user ID from localStorage\n      const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n\n      // Send to AI\n      const response = await apiService.sendMessage(content, userId || undefined, mode);\n\n      // Add AI response\n      const aiMessage = {\n        message_id: `ai_${Date.now()}`,\n        content: response.response,\n        sender: 'assistant',\n        timestamp: response.timestamp,\n        mode: response.mode\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n      // Check for crisis keywords\n      const crisisKeywords = ['suicide', 'kill myself', 'end it all', 'want to die', 'hurt myself', 'self-harm', 'overdose', 'dangerous', 'emergency', 'crisis', 'help me', 'desperate', 'no hope', 'give up', 'can\\'t take it anymore'];\n      const hasCrisisKeywords = crisisKeywords.some(keyword => content.toLowerCase().includes(keyword));\n      if (hasCrisisKeywords) {\n        // Add crisis warning message\n        const crisisMessage = {\n          message_id: `crisis_${Date.now()}`,\n          content: `⚠️ I'm concerned about what you're going through. If you're in immediate danger, please call 911 or the National Suicide Prevention Lifeline at 988 (24/7). You're not alone, and there are people who want to help you.`,\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          mode: 'support'\n        };\n        setMessages(prev => [...prev, crisisMessage]);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError(error instanceof Error ? error.message : 'Failed to send message');\n\n      // Add error message\n      const errorMessage = {\n        message_id: `error_${Date.now()}`,\n        content: 'I apologize, but I\\'m having trouble responding right now. Please try again in a moment.',\n        sender: 'assistant',\n        timestamp: new Date().toISOString(),\n        mode\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentMode, userContext]);\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    localStorage.removeItem(STORAGE_KEYS.CONVERSATION_HISTORY);\n  }, []);\n  const setMode = useCallback(mode => {\n    setCurrentMode(mode);\n  }, []);\n  const loadConversationHistory = useCallback(async () => {\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) return;\n    try {\n      setIsLoading(true);\n      const history = await apiService.getConversationHistory(userId);\n      setMessages(history);\n    } catch (error) {\n      console.error('Error loading conversation history:', error);\n      setError('Failed to load conversation history');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const value = {\n    messages,\n    isLoading,\n    error,\n    currentMode,\n    sendMessage,\n    clearMessages,\n    setMode,\n    loadConversationHistory\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"qNvkCHzSk7x6qPH7GIf2ElkxHWs=\", false, function () {\n  return [useUserContext];\n});\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\n// Hook for getting recent messages for context\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useRecentMessages = (limit = 5) => {\n  _s3();\n  const {\n    messages\n  } = useChat();\n  return messages.slice(-limit);\n};\n\n// Hook for checking if there are unread messages\n_s3(useRecentMessages, \"4kgj2XEFC2h8Tt8QuShW04G6kC4=\", false, function () {\n  return [useChat];\n});\nexport const useUnreadMessages = () => {\n  _s4();\n  const {\n    messages\n  } = useChat();\n  const lastMessage = messages[messages.length - 1];\n  return {\n    hasUnread: (lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.sender) === 'assistant',\n    lastMessage\n  };\n};\n\n// Hook for getting conversation statistics\n_s4(useUnreadMessages, \"4kgj2XEFC2h8Tt8QuShW04G6kC4=\", false, function () {\n  return [useChat];\n});\nexport const useConversationStats = () => {\n  _s5();\n  const {\n    messages,\n    currentMode\n  } = useChat();\n  const stats = {\n    totalMessages: messages.length,\n    userMessages: messages.filter(m => m.sender === 'user').length,\n    aiMessages: messages.filter(m => m.sender === 'assistant').length,\n    supportMessages: messages.filter(m => m.mode === 'support').length,\n    coachMessages: messages.filter(m => m.mode === 'coach').length,\n    currentMode\n  };\n  return stats;\n};\n_s5(useConversationStats, \"mpTLDAO4FZY9skREKXuCLgL4JFQ=\", false, function () {\n  return [useChat];\n});\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","STORAGE_KEYS","apiService","useUserContext","jsxDEV","_jsxDEV","ChatContext","undefined","ChatProvider","children","_s","messages","setMessages","isLoading","setIsLoading","error","setError","currentMode","setCurrentMode","userContext","loadHistory","savedHistory","localStorage","getItem","CONVERSATION_HISTORY","parsedHistory","JSON","parse","mode","console","length","historyData","timestamp","Date","toISOString","setItem","stringify","sendMessage","content","trim","userMessage","message_id","now","sender","prev","userId","USER_ID","response","aiMessage","crisisKeywords","hasCrisisKeywords","some","keyword","toLowerCase","includes","crisisMessage","Error","message","errorMessage","clearMessages","removeItem","setMode","loadConversationHistory","history","getConversationHistory","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","useRecentMessages","limit","_s3","slice","useUnreadMessages","_s4","lastMessage","hasUnread","useConversationStats","_s5","stats","totalMessages","userMessages","filter","m","aiMessages","supportMessages","coachMessages","$RefreshReg$"],"sources":["/Users/sarthak/CAL hackathon 2025/Helper/social_change_frontend/src/contexts/ChatContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { ChatMessage, ChatResponse, STORAGE_KEYS } from '../types';\nimport { apiService } from '../services/api';\nimport { useUserContext } from './UserContext';\n\ninterface ChatContextType {\n  messages: ChatMessage[];\n  isLoading: boolean;\n  error: string | null;\n  currentMode: 'support' | 'coach';\n  sendMessage: (content: string, mode?: 'support' | 'coach') => Promise<void>;\n  clearMessages: () => void;\n  setMode: (mode: 'support' | 'coach') => void;\n  loadConversationHistory: () => Promise<void>;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ children }) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentMode, setCurrentMode] = useState<'support' | 'coach'>('support');\n  \n  const userContext = useUserContext();\n\n  // Load conversation history from localStorage\n  useEffect(() => {\n    const loadHistory = () => {\n      try {\n        const savedHistory = localStorage.getItem(STORAGE_KEYS.CONVERSATION_HISTORY);\n        if (savedHistory) {\n          const parsedHistory = JSON.parse(savedHistory);\n          setMessages(parsedHistory.messages || []);\n          setCurrentMode(parsedHistory.mode || 'support');\n        }\n      } catch (error) {\n        console.error('Error loading conversation history:', error);\n      }\n    };\n\n    loadHistory();\n  }, []);\n\n  // Save messages to localStorage whenever they change\n  useEffect(() => {\n    if (messages.length > 0) {\n      const historyData = {\n        messages,\n        mode: currentMode,\n        timestamp: new Date().toISOString(),\n      };\n      localStorage.setItem(STORAGE_KEYS.CONVERSATION_HISTORY, JSON.stringify(historyData));\n    }\n  }, [messages, currentMode]);\n\n  const sendMessage = useCallback(async (content: string, mode: 'support' | 'coach' = currentMode) => {\n    if (!content.trim()) return;\n\n    const userMessage: ChatMessage = {\n      message_id: `user_${Date.now()}`,\n      content: content.trim(),\n      sender: 'user',\n      timestamp: new Date().toISOString(),\n      mode,\n    };\n\n    // Add user message immediately\n    setMessages(prev => [...prev, userMessage]);\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      // Get user ID from localStorage\n      const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n\n      // Send to AI\n      const response: ChatResponse = await apiService.sendMessage(content, userId || undefined, mode);\n\n      // Add AI response\n      const aiMessage: ChatMessage = {\n        message_id: `ai_${Date.now()}`,\n        content: response.response,\n        sender: 'assistant',\n        timestamp: response.timestamp,\n        mode: response.mode,\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n\n      // Check for crisis keywords\n      const crisisKeywords = [\n        'suicide', 'kill myself', 'end it all', 'want to die',\n        'hurt myself', 'self-harm', 'overdose', 'dangerous',\n        'emergency', 'crisis', 'help me', 'desperate',\n        'no hope', 'give up', 'can\\'t take it anymore'\n      ];\n\n      const hasCrisisKeywords = crisisKeywords.some(keyword => \n        content.toLowerCase().includes(keyword)\n      );\n\n      if (hasCrisisKeywords) {\n        // Add crisis warning message\n        const crisisMessage: ChatMessage = {\n          message_id: `crisis_${Date.now()}`,\n          content: `⚠️ I'm concerned about what you're going through. If you're in immediate danger, please call 911 or the National Suicide Prevention Lifeline at 988 (24/7). You're not alone, and there are people who want to help you.`,\n          sender: 'assistant',\n          timestamp: new Date().toISOString(),\n          mode: 'support',\n        };\n        setMessages(prev => [...prev, crisisMessage]);\n      }\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError(error instanceof Error ? error.message : 'Failed to send message');\n      \n      // Add error message\n      const errorMessage: ChatMessage = {\n        message_id: `error_${Date.now()}`,\n        content: 'I apologize, but I\\'m having trouble responding right now. Please try again in a moment.',\n        sender: 'assistant',\n        timestamp: new Date().toISOString(),\n        mode,\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [currentMode, userContext]);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    localStorage.removeItem(STORAGE_KEYS.CONVERSATION_HISTORY);\n  }, []);\n\n  const setMode = useCallback((mode: 'support' | 'coach') => {\n    setCurrentMode(mode);\n  }, []);\n\n  const loadConversationHistory = useCallback(async () => {\n    const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n    if (!userId) return;\n\n    try {\n      setIsLoading(true);\n      const history = await apiService.getConversationHistory(userId);\n      setMessages(history);\n    } catch (error) {\n      console.error('Error loading conversation history:', error);\n      setError('Failed to load conversation history');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const value: ChatContextType = {\n    messages,\n    isLoading,\n    error,\n    currentMode,\n    sendMessage,\n    clearMessages,\n    setMode,\n    loadConversationHistory,\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChat = (): ChatContextType => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\n// Hook for getting recent messages for context\nexport const useRecentMessages = (limit: number = 5) => {\n  const { messages } = useChat();\n  return messages.slice(-limit);\n};\n\n// Hook for checking if there are unread messages\nexport const useUnreadMessages = () => {\n  const { messages } = useChat();\n  const lastMessage = messages[messages.length - 1];\n  \n  return {\n    hasUnread: lastMessage?.sender === 'assistant',\n    lastMessage,\n  };\n};\n\n// Hook for getting conversation statistics\nexport const useConversationStats = () => {\n  const { messages, currentMode } = useChat();\n  \n  const stats = {\n    totalMessages: messages.length,\n    userMessages: messages.filter(m => m.sender === 'user').length,\n    aiMessages: messages.filter(m => m.sender === 'assistant').length,\n    supportMessages: messages.filter(m => m.mode === 'support').length,\n    coachMessages: messages.filter(m => m.mode === 'coach').length,\n    currentMode,\n  };\n\n  return stats;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}