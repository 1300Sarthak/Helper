{"ast":null,"code":"var _jsxFileName = \"/Users/sarthak/CAL hackathon 2025/Helper/social_change_frontend/src/contexts/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { STORAGE_KEYS } from '../types';\nimport { apiService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext(undefined);\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user from localStorage on mount\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const savedUser = localStorage.getItem(STORAGE_KEYS.USER_PROFILE);\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n        if (savedUser && userId) {\n          const parsedUser = JSON.parse(savedUser);\n          setUser(parsedUser);\n\n          // Optionally refresh user data from server\n          try {\n            const serverUser = await apiService.getUserProfile(userId);\n            if (serverUser) {\n              setUser(serverUser);\n              localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(serverUser));\n            }\n          } catch (error) {\n            console.warn('Could not refresh user from server, using cached data');\n          }\n        }\n      } catch (error) {\n        console.error('Error loading user from storage:', error);\n        setError('Failed to load user data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n  const login = async profile => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Create or update profile on server\n      const savedProfile = await apiService.createOrUpdateProfile(profile);\n\n      // Save to local storage\n      localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(savedProfile));\n      if (savedProfile.user_id) {\n        localStorage.setItem(STORAGE_KEYS.USER_ID, savedProfile.user_id);\n      }\n      setUser(savedProfile);\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to login');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(STORAGE_KEYS.USER_PROFILE);\n    localStorage.removeItem(STORAGE_KEYS.USER_ID);\n    localStorage.removeItem(STORAGE_KEYS.CONVERSATION_HISTORY);\n  };\n  const updateProfile = async updates => {\n    if (!user) {\n      throw new Error('No user logged in');\n    }\n    try {\n      setIsLoading(true);\n      setError(null);\n      const updatedProfile = {\n        ...user,\n        ...updates\n      };\n      const savedProfile = await apiService.createOrUpdateProfile(updatedProfile);\n\n      // Update local storage\n      localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(savedProfile));\n      setUser(savedProfile);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to update profile');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const refreshUser = async () => {\n    if (!(user !== null && user !== void 0 && user.user_id)) {\n      return;\n    }\n    try {\n      setIsLoading(true);\n      setError(null);\n      const serverUser = await apiService.getUserProfile(user.user_id);\n      if (serverUser) {\n        setUser(serverUser);\n        localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(serverUser));\n      }\n    } catch (error) {\n      console.error('Refresh user error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh user data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const value = {\n    user,\n    isLoading,\n    error,\n    login,\n    logout,\n    updateProfile,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"caAZa649wyY9nHJT6au393y4yCs=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\n// Hook for checking if user is authenticated\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useAuth = () => {\n  _s3();\n  const {\n    user,\n    isLoading\n  } = useUser();\n  return {\n    isAuthenticated: !!user,\n    isLoading,\n    user\n  };\n};\n\n// Hook for getting user context for AI\n_s3(useAuth, \"PQCoTygNGGBleNbc51kaxaFJif8=\", false, function () {\n  return [useUser];\n});\nexport const useUserContext = () => {\n  _s4();\n  const {\n    user\n  } = useUser();\n  if (!user) {\n    return {\n      location: 'Not specified',\n      situation: 'Not specified',\n      primaryNeeds: [],\n      name: 'Anonymous'\n    };\n  }\n  return {\n    location: user.location || 'Not specified',\n    situation: user.situation,\n    primaryNeeds: user.primary_needs || [],\n    name: user.name || 'Anonymous'\n  };\n};\n_s4(useUserContext, \"Q+JCVIy3JH0MXpFK+vm68eAxsAY=\", false, function () {\n  return [useUser];\n});\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","STORAGE_KEYS","apiService","jsxDEV","_jsxDEV","UserContext","undefined","UserProvider","children","_s","user","setUser","isLoading","setIsLoading","error","setError","loadUser","savedUser","localStorage","getItem","USER_PROFILE","userId","USER_ID","parsedUser","JSON","parse","serverUser","getUserProfile","setItem","stringify","console","warn","login","profile","savedProfile","createOrUpdateProfile","user_id","Error","message","logout","removeItem","CONVERSATION_HISTORY","updateProfile","updates","updatedProfile","refreshUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","useAuth","_s3","isAuthenticated","useUserContext","_s4","location","situation","primaryNeeds","name","primary_needs","$RefreshReg$"],"sources":["/Users/sarthak/CAL hackathon 2025/Helper/social_change_frontend/src/contexts/UserContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { UserProfile, STORAGE_KEYS } from '../types';\nimport { apiService } from '../services/api';\n\ninterface UserContextType {\n  user: UserProfile | null;\n  isLoading: boolean;\n  error: string | null;\n  login: (profile: UserProfile) => Promise<void>;\n  logout: () => void;\n  updateProfile: (updates: Partial<UserProfile>) => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\ninterface UserProviderProps {\n  children: ReactNode;\n}\n\nexport const UserProvider: React.FC<UserProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load user from localStorage on mount\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const savedUser = localStorage.getItem(STORAGE_KEYS.USER_PROFILE);\n        const userId = localStorage.getItem(STORAGE_KEYS.USER_ID);\n\n        if (savedUser && userId) {\n          const parsedUser = JSON.parse(savedUser);\n          setUser(parsedUser);\n          \n          // Optionally refresh user data from server\n          try {\n            const serverUser = await apiService.getUserProfile(userId);\n            if (serverUser) {\n              setUser(serverUser);\n              localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(serverUser));\n            }\n          } catch (error) {\n            console.warn('Could not refresh user from server, using cached data');\n          }\n        }\n      } catch (error) {\n        console.error('Error loading user from storage:', error);\n        setError('Failed to load user data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  const login = async (profile: UserProfile) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Create or update profile on server\n      const savedProfile = await apiService.createOrUpdateProfile(profile);\n      \n      // Save to local storage\n      localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(savedProfile));\n      if (savedProfile.user_id) {\n        localStorage.setItem(STORAGE_KEYS.USER_ID, savedProfile.user_id);\n      }\n      \n      setUser(savedProfile);\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to login');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(STORAGE_KEYS.USER_PROFILE);\n    localStorage.removeItem(STORAGE_KEYS.USER_ID);\n    localStorage.removeItem(STORAGE_KEYS.CONVERSATION_HISTORY);\n  };\n\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    if (!user) {\n      throw new Error('No user logged in');\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const updatedProfile = { ...user, ...updates };\n      const savedProfile = await apiService.createOrUpdateProfile(updatedProfile);\n      \n      // Update local storage\n      localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(savedProfile));\n      setUser(savedProfile);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to update profile');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshUser = async () => {\n    if (!user?.user_id) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const serverUser = await apiService.getUserProfile(user.user_id);\n      if (serverUser) {\n        setUser(serverUser);\n        localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(serverUser));\n      }\n    } catch (error) {\n      console.error('Refresh user error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to refresh user data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const value: UserContextType = {\n    user,\n    isLoading,\n    error,\n    login,\n    logout,\n    updateProfile,\n    refreshUser,\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\n// Hook for checking if user is authenticated\nexport const useAuth = () => {\n  const { user, isLoading } = useUser();\n  return {\n    isAuthenticated: !!user,\n    isLoading,\n    user,\n  };\n};\n\n// Hook for getting user context for AI\nexport const useUserContext = () => {\n  const { user } = useUser();\n  \n  if (!user) {\n    return {\n      location: 'Not specified',\n      situation: 'Not specified',\n      primaryNeeds: [],\n      name: 'Anonymous',\n    };\n  }\n\n  return {\n    location: user.location || 'Not specified',\n    situation: user.situation,\n    primaryNeeds: user.primary_needs || [],\n    name: user.name || 'Anonymous',\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}